# -*- coding: utf-8 -*-
"""Lab3NataliaMart√≠nez.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c0B2NDKwmTy4JpibSFwGQHwovcnm7FEC
"""

# imports the needed methods from numerical python and matplotlib library
from numpy import loadtxt
from matplotlib import pyplot as plt

# unpacks the input size, the number of comparisons, and the elapsed time
size, comps, etime = loadtxt("dataDivideAndConquer.txt").T

from google.colab import drive
drive.mount('/content/drive')
""" visualization """
# closes all files and enables interactive plotting
plt.close('all')
plt.ion()
# creates a figure and a set of axes
fig, ax = plt.subplots()
# computes scaling constants to improve presentation
c1 = (size).mean() / comps.mean()
c2 = (size).mean() / etime.mean()
# plots the expected (theoretical) time as a function of size
ax.loglog(size, size,    color='black', linestyle='--',
          label='lineal')
# plots the elapsed time as a function of size
ax.loglog(size, etime*c2, color='black',  linestyle='', marker='o',
          markersize=12, label='elapsed-time')
# plots the number of comparisons as a function of size
ax.loglog(size, comps*c1, color='red',   linestyle='', marker='*',
          markersize=12, label='comparisons')
ax.set_xlabel('input size, N')
ax.set_ylabel('time, t')
ax.set_title('Divide and Conquer')
ax.legend()
# exports the figure in PNG with a resolution of 600 DPI
fig.savefig("DivideAndConquer.png", dpi=600)

# imports the needed methods from numerical python and matplotlib library
from numpy import loadtxt
from matplotlib import pyplot as plt

# unpacks the input size, the number of comparisons, and the elapsed time
size, comps, etime = loadtxt("dataBruteForce.txt").T

from google.colab import drive
drive.mount('/content/drive')
""" visualization """
# closes all files and enables interactive plotting
plt.close('all')
plt.ion()
# creates a figure and a set of axes
fig, ax = plt.subplots()
# computes scaling constants to improve presentation
c1 = (size**2).mean() / comps.mean()
c2 = (size**2).mean() / etime.mean()
# plots the expected (theoretical) time as a function of size
ax.loglog(size, size**2,    color='black', linestyle='--',
          label='quadratic')
# plots the elapsed time as a function of size
ax.loglog(size, etime*c2, color='black',  linestyle='', marker='o',
          markersize=12, label='elapsed-time')
# plots the number of comparisons as a function of size
ax.loglog(size, comps*c1, color='red',   linestyle='', marker='*',
          markersize=12, label='comparisons')
ax.set_xlabel('input size, N')
ax.set_ylabel('time, t')
ax.set_title('Brute Force')
ax.legend()
# exports the figure in PNG with a resolution of 600 DPI
fig.savefig("BruteForce.png", dpi=600)